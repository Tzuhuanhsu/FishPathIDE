'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.onClickExport = exports.ready = exports.update = exports.methods = exports.$ = exports.template = void 0;
exports.template = `
    <ui-prop type="dump" class="prop-pathData" name="pathData"></ui-prop>
    <ui-prop type="dump" class="prop-pathRoot" name="Path Root"></ui-prop>
    <ui-prop type="dump" class="prop-FormationRoot" name="Formation Root"></ui-prop>
    <ui-prop type="dump" class="prop-positions" name="Positions"></ui-prop>
    <ui-prop type="dump" class="prop-color" name="Color"></ui-prop>
    <ui-prop type="dump" class="prop-refresh" name="refresh"></ui-prop>
    <ui-button class="exportButton">點我輸出</ui-button>
`;
exports.$ = {
    pathData: '.prop-pathData',
    pathRoot: '.prop-pathRoot',
    formationRoot: '.prop-FormationRoot',
    positions: '.prop-positions',
    color: '.prop-color',
    refresh: ".prop-refresh",
    exportButton: '.exportButton',
};
exports.methods = {
    onClickExport
};
function update(dump) {
    this.dump = dump;
    this.$.pathData.render(dump.value.pathData);
    this.$.pathRoot.render(dump.value.pathRoot);
    this.$.positions.render(dump.value.positions);
    this.$.color.render(dump.value.color);
    this.$.formationRoot.render(dump.value.formationRoot);
    this.$.refresh.render(dump.value.refreshPath);
}
exports.update = update;
function ready() {
    this.$.exportButton.addEventListener('confirm', onClickExport.bind(this));
}
exports.ready = ready;
async function onClickExport() {
    const pathInfos = [];
    console.log(`=====輸出路徑資料======`, this.dump.value);
    //組合路徑資料
    for (let index in this.dump.value.fishPositions.value) {
        const data = {
            position: {
                x: this.dump.value.fishPositions.value[index].value.x,
                y: this.dump.value.fishPositions.value[index].value.y,
                z: this.dump.value.fishPositions.value[index].value.z
            },
            rotation: {
                x: this.dump.value.fishRotations.value[index].value.x,
                y: this.dump.value.fishRotations.value[index].value.y,
                z: this.dump.value.fishRotations.value[index].value.z
            },
            scale: {
                x: this.dump.value.fishScales.value[index].value.x,
                y: this.dump.value.fishScales.value[index].value.y,
                z: this.dump.value.fishScales.value[index].value.z
            },
            speed: this.dump.value.fishSpeeds.value[index].value,
            delayTime: this.dump.value.fishDelays.value[index].value
        };
        pathInfos.push(data);
    }
    console.log(`=====輸出路徑資料======`, pathInfos);
    const pathUUID = this.dump.value.pathData.value.uuid;
    Editor.Message.send('fish-creator-extension', 'export-json', {
        pathUUID: pathUUID,
        data: pathInfos,
    });
}
exports.onClickExport = onClickExport;
//# sourceMappingURL=data:application/json;base64,